class zip {
	function constructor(...iterables) {
		this.iterables = iterables;
		this.iterators = [];
	}

	static function #call(...args) {
		return new zip(...args);
	}

	function #iter() {
		for(iterable in this.iterables) {
			this.iterators.add(iter(iterable));
		}
		return this;
	}

	function #next() {
		return (next(i) for i in this.iterators);
	}
}

class map {
	function constructor(fn, iterable) {
		this.fn = fn;
		this.iterable = iterable;
		this.iterator = null;
	}

	static function #call(...args) {
		return new map(...args);
	}

	function #iter() {
		this.iterator = iter(this.iterable);
		return this;
	}

	function #next() {
		return this.fn(next(this.iterator));
	}
}

class filter {
	function constructor(predicate, iterable) {
		this.predicate = predicate;
		this.iterable = iterable;
		this.iterator = null;
	}

	static function #call(...args) {
		return new filter(...args);
	}

	function #iter() {
		this.iterator = iter(this.iterable);
		return this;
	}

	function #next() {
		result = next(this.iterator);
		if(this.predicate(result))
			return result;
		else
			return next(this);
	}
}

class enumerate {
	function constructor(iterable) {
		this.iterable = iterable;
		this.iterator = null;
		this.count = 0;
	}

	static function #call(...args) {
		return new enumerate(...args);
	}

	function #iter() {
		this.iterator = iter(this.iterable);
		this.count = 0;
		return this;
	}

	function #next() {
		value = next(this.iterator);
		count = this.count;
		this.count = this.count + 1;
		return (count, value);
	}
}

function add2(x) {
	return x + 2;
}

print(array(map(add2, [1, 2, 3])));